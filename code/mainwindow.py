# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import threading
import matplotlib.backends.backend_tkagg
import matplotlib

import AnalysisWindow
import dnswindow
import ipwindow
from analysis_data import analysis_port, plot_port, plot_all_port, analysis_ip_network
from analysis_tree import *
from PyQt5.QtGui import QColor, QIcon

from draw_network import draw_ip_network
from read_file import read, read_dir
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QAbstractItemView, QTreeWidgetItem, QPushButton, \
    QTreeWidget, QHeaderView
import rosource_rc
import matplotlib.pyplot as plt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1170, 699)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(1, 1, 1, 1)
        self.horizontalLayout.setSpacing(1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setMinimumSize(QtCore.QSize(80, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.filter = QtWidgets.QLineEdit(self.widget)
        self.filter.setMinimumSize(QtCore.QSize(300, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.filter.setFont(font)
        self.filter.setObjectName("filter")
        self.horizontalLayout.addWidget(self.filter)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setMinimumSize(QtCore.QSize(80, 0))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(1, 1, 1, 1)
        self.horizontalLayout_2.setSpacing(1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setMinimumSize(QtCore.QSize(60, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.src_mac = QtWidgets.QLineEdit(self.widget_2)
        self.src_mac.setMinimumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.src_mac.setFont(font)
        self.src_mac.setObjectName("src_mac")
        self.horizontalLayout_2.addWidget(self.src_mac)
        self.label_3 = QtWidgets.QLabel(self.widget_2)
        self.label_3.setMinimumSize(QtCore.QSize(70, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.src_mac_2 = QtWidgets.QLineEdit(self.widget_2)
        self.src_mac_2.setMinimumSize(QtCore.QSize(200, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.src_mac_2.setFont(font)
        self.src_mac_2.setObjectName("src_mac_2")
        self.horizontalLayout_2.addWidget(self.src_mac_2)
        self.label_8 = QtWidgets.QLabel(self.widget_2)
        self.label_8.setMinimumSize(QtCore.QSize(70, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_2.addWidget(self.label_8)
        self.GMTtime = QtWidgets.QLineEdit(self.widget_2)
        self.GMTtime.setMinimumSize(QtCore.QSize(160, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.GMTtime.setFont(font)
        self.GMTtime.setText("")
        self.GMTtime.setObjectName("GMTtime")
        self.horizontalLayout_2.addWidget(self.GMTtime)
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        self.label_4.setMinimumSize(QtCore.QSize(70, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.protocol = QtWidgets.QLineEdit(self.widget_2)
        self.protocol.setMinimumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.protocol.setFont(font)
        self.protocol.setObjectName("protocol")
        self.horizontalLayout_2.addWidget(self.protocol)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_3.setContentsMargins(1, 1, 1, 1)
        self.horizontalLayout_3.setSpacing(1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_5 = QtWidgets.QLabel(self.widget_3)
        self.label_5.setMinimumSize(QtCore.QSize(60, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.src_ip = QtWidgets.QLineEdit(self.widget_3)
        self.src_ip.setMinimumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.src_ip.setFont(font)
        self.src_ip.setObjectName("src_ip")
        self.horizontalLayout_3.addWidget(self.src_ip)
        self.label_6 = QtWidgets.QLabel(self.widget_3)
        self.label_6.setMinimumSize(QtCore.QSize(60, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_3.addWidget(self.label_6)
        self.des_ip = QtWidgets.QLineEdit(self.widget_3)
        self.des_ip.setMinimumSize(QtCore.QSize(150, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.des_ip.setFont(font)
        self.des_ip.setObjectName("des_ip")
        self.horizontalLayout_3.addWidget(self.des_ip)
        self.label_7 = QtWidgets.QLabel(self.widget_3)
        self.label_7.setMinimumSize(QtCore.QSize(70, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)
        self.p_len = QtWidgets.QLineEdit(self.widget_3)
        self.p_len.setMinimumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.p_len.setFont(font)
        self.p_len.setObjectName("p_len")
        self.horizontalLayout_3.addWidget(self.p_len)
        self.label_9 = QtWidgets.QLabel(self.widget_3)
        self.label_9.setMinimumSize(QtCore.QSize(60, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_3.addWidget(self.label_9)
        self.src_port = QtWidgets.QLineEdit(self.widget_3)
        self.src_port.setMinimumSize(QtCore.QSize(100, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.src_port.setFont(font)
        self.src_port.setObjectName("src_port")
        self.horizontalLayout_3.addWidget(self.src_port)
        self.label_10 = QtWidgets.QLabel(self.widget_3)
        self.label_10.setMinimumSize(QtCore.QSize(80, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_3.addWidget(self.label_10)
        self.des_port = QtWidgets.QLineEdit(self.widget_3)
        self.des_port.setMinimumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.des_port.setFont(font)
        self.des_port.setObjectName("des_port")
        self.horizontalLayout_3.addWidget(self.des_port)
        self.verticalLayout.addWidget(self.widget_3)
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.tableWidget = QtWidgets.QTableWidget(self.splitter)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.tableWidget.setFont(font)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.treeWidget = QtWidgets.QTreeWidget(self.splitter)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.treeWidget.setFont(font)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setText(0, "1")
        self.verticalLayout.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1170, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menu_4)
        self.menu_5.setObjectName("menu_5")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionopen_file = QtWidgets.QAction(MainWindow)
        self.actionopen_file.setObjectName("actionopen_file")
        self.actionopen_dir = QtWidgets.QAction(MainWindow)
        self.actionopen_dir.setObjectName("actionopen_dir")
        self.actionclear = QtWidgets.QAction(MainWindow)
        self.actionclear.setObjectName("actionclear")
        self.actionclear_tree = QtWidgets.QAction(MainWindow)
        self.actionclear_tree.setObjectName("actionclear_tree")
        self.actionpicture = QtWidgets.QAction(MainWindow)
        self.actionpicture.setObjectName("actionpicture")
        self.actionsession = QtWidgets.QAction(MainWindow)
        self.actionsession.setObjectName("actionsession")
        self.actionIP = QtWidgets.QAction(MainWindow)
        self.actionIP.setObjectName("actionIP")
        self.actionall_data = QtWidgets.QAction(MainWindow)
        self.actionall_data.setObjectName("actionall_data")
        self.actionsrc_tcp = QtWidgets.QAction(MainWindow)
        self.actionsrc_tcp.setObjectName("actionsrc_tcp")
        self.actiondes_tcp = QtWidgets.QAction(MainWindow)
        self.actiondes_tcp.setObjectName("actiondes_tcp")
        self.actionsrc_udp = QtWidgets.QAction(MainWindow)
        self.actionsrc_udp.setObjectName("actionsrc_udp")
        self.actiondes_udp = QtWidgets.QAction(MainWindow)
        self.actiondes_udp.setObjectName("actiondes_udp")
        self.actionall_tcp = QtWidgets.QAction(MainWindow)
        self.actionall_tcp.setObjectName("actionall_tcp")
        self.actionall_port = QtWidgets.QAction(MainWindow)
        self.actionall_port.setObjectName("actionall_port")
        self.actionall = QtWidgets.QAction(MainWindow)
        self.actionall.setObjectName("actionall")
        self.actionDNS = QtWidgets.QAction(MainWindow)
        self.actionDNS.setObjectName("actionDNS")
        self.menu.addAction(self.actionopen_file)
        self.menu.addAction(self.actionopen_dir)
        self.menu_2.addAction(self.actionclear)
        self.menu_2.addAction(self.actionclear_tree)
        self.menu_3.addAction(self.actionpicture)
        self.menu_3.addAction(self.actionsession)
        self.menu_5.addAction(self.actionsrc_tcp)
        self.menu_5.addAction(self.actiondes_tcp)
        self.menu_5.addAction(self.actionsrc_udp)
        self.menu_5.addAction(self.actiondes_udp)
        self.menu_5.addAction(self.actionall_port)
        self.menu_4.addSeparator()
        self.menu_4.addAction(self.actionIP)
        self.menu_4.addAction(self.menu_5.menuAction())
        self.menu_4.addAction(self.actionall_data)
        self.menu_4.addAction(self.actionDNS)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # self part
        self.init_GUI()
        self.init_signal_slot()

    def init_GUI(self):
        # read only
        self.src_ip.setReadOnly(True)
        self.src_mac.setReadOnly(True)
        self.src_port.setReadOnly(True)

        self.src_mac_2.setReadOnly(True)
        self.des_ip.setReadOnly(True)
        self.des_port.setReadOnly(True)

        self.GMTtime.setReadOnly(True)
        self.protocol.setReadOnly(True)
        self.p_len.setReadOnly(True)

        # NO. TIME SRC DES Protocol length info
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setShowGrid(False)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setHorizontalHeaderLabels(
            ['NO.', 'Time', 'Source', 'Destination', 'Protocol', 'Length', 'Info'])
        self.tableWidget.setSelectionBehavior(QTableWidget.SelectRows)
        self.tableWidget.verticalHeader().setDefaultSectionSize(30)
        self.tableWidget.setColumnWidth(0, 50)
        self.tableWidget.setColumnWidth(1, 250)
        self.tableWidget.setColumnWidth(2, 280)
        self.tableWidget.setColumnWidth(3, 280)
        self.tableWidget.setColumnWidth(4, 140)
        self.tableWidget.setColumnWidth(5, 100)
        self.tableWidget.setColumnWidth(6, 1000)
        self.treeWidget.setHeaderHidden(True)
        self.treeWidget.header().setMinimumSectionSize(3000)
        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.pro = []
        self.send_rev = []
        # style
        self.filter.setPlaceholderText('输入过滤条件:TCP|UDP|ICMP|TLS|ARP|DNS|OICQ|HTTP|ip=|port=|...')
        self.actionopen_file.setIcon(QIcon(':/img/file.png'))
        self.actionopen_dir.setIcon(QIcon(':/img/dir.png'))
        self.actionclear.setIcon(QIcon(':/img/clear.png'))
        self.actionclear_tree.setIcon(QIcon(':/img/clear_tree.png'))
        self.actionpicture.setIcon(QIcon(':/img/traffic.png'))
        self.actionIP.setIcon(QIcon(':/img/IP.png'))
        self.menu_5.setIcon(QIcon(':/img/port.png'))
        self.actionall_port.setIcon(QIcon(':/img/port.png'))
        self.actionsession.setIcon(QIcon(':/img/graph.png'))
        self.actionall_data.setIcon(QIcon(':/img/comprehensive.png'))
        self.actionDNS.setIcon(QIcon(':/img/dns.png'))
        self.statusbar.showMessage('一切就绪')

    def init_signal_slot(self):
        self.actionopen_file.triggered.connect(self.open_file)
        self.tableWidget.itemClicked.connect(self.show_data)
        self.actionopen_dir.triggered.connect(self.open_dir)
        self.pushButton.clicked.connect(self.drop_data)
        self.filter.returnPressed.connect(self.drop_data)
        self.actionclear.triggered.connect(self.clear_table)
        self.actionclear_tree.triggered.connect(self.clear_tree)
        self.actionpicture.triggered.connect(self.show_traffic_pic)
        self.actionIP.triggered.connect(self.show_ip_distribution)
        self.actiondes_tcp.triggered.connect(self.show_des_tcp_port)
        self.actionsrc_tcp.triggered.connect(self.show_src_tcp_port)
        self.actionsrc_udp.triggered.connect(self.show_src_udp_port)
        self.actiondes_udp.triggered.connect(self.show_des_udp_port)
        self.actionall_port.triggered.connect(self.show_all_port)
        self.actionsession.triggered.connect(self.draw_graph)
        self.actionall_data.triggered.connect(self.show_all_analysis)
        self.actionDNS.triggered.connect(self.dns_analysis)

        self.toolBar.addAction(self.actionopen_file)
        self.toolBar.addAction(self.actionopen_dir)
        self.toolBar.addAction(self.actionclear)
        self.toolBar.addAction(self.actionclear_tree)
        self.toolBar.addAction(self.actionpicture)
        self.toolBar.addAction(self.actionIP)
        self.toolBar.addAction(self.actionall_port)
        self.toolBar.addAction(self.actionsession)
        self.toolBar.addAction(self.actionall_data)
        self.toolBar.addAction(self.actionDNS)

    def clear_table(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        del self.pro
        self.pro = []
        del self.send_rev
        self.send_rev = []

        self.src_ip.clear()
        self.src_mac.clear()
        self.src_port.clear()

        self.des_ip.clear()
        self.des_port.clear()
        self.src_mac_2.clear()

        self.GMTtime.clear()
        self.p_len.clear()
        self.protocol.clear()
        self.clear_tree()

    def clear_tree(self):
        self.treeWidget.clear()

    def open_file(self):
        absolutepath, _ = QtWidgets.QFileDialog.getOpenFileName(None, "选取文件", os.getcwd(),
                                                                "*.pcap")
        if not absolutepath:
            return
        else:
            self.statusbar.showMessage('分析数据中 ...')
            self.show_package(absolutepath)
            self.statusbar.showMessage('解析完成')

    def open_dir(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", "./")  # 起始路径
        if not directory:
            return
        else:
            self.statusbar.showMessage('分析数据中 ...')
            self.show_package_batch(directory)
            self.statusbar.showMessage('解析完成')

    def draw_graph(self):
        if not self.pro:
            return
        res = analysis_ip_network(self.pro)
        draw_ip_network(res)

    def show_traffic_pic(self):
        if self.send_rev:
            plt.plot(list(self.send_rev.keys()), list(self.send_rev.values()))
            plt.grid(True)
            plt.xlabel('time')
            plt.ylabel('package data size')
            plt.title('traffic analysis')
            plt.show()
        else:
            return

    def show_ip_distribution(self):
        if not self.pro:
            return
        self.form = QtWidgets.QMainWindow()
        self.sub_window = ipwindow.Ui_MainWindow()
        self.sub_window.setupUi(self.form)
        self.form.setWindowIcon(QIcon(':/img/IP.png'))
        self.form.show()
        self.sub_window.pro = self.pro
        self.sub_window.init_show()

    def show_all_analysis(self):
        if not self.pro:
            return
        self.form_1 = QtWidgets.QMainWindow()
        self.sub_window_1 = AnalysisWindow.Ui_MainWindow()
        self.sub_window_1.setupUi(self.form_1)
        self.form_1.setWindowIcon(QIcon(':/img/comprehensive.png'))
        self.form_1.show()
        self.sub_window_1.pro = self.pro
        self.sub_window_1.analysis()

    def dns_analysis(self):
        if not self.pro:
            return
        self.form_2 = QtWidgets.QMainWindow()
        self.sub_window_2 = dnswindow.Ui_MainWindow()
        self.sub_window_2.setupUi(self.form_2)
        self.form_2.setWindowIcon(QIcon(':/img/dns.png'))
        self.form_2.show()
        self.sub_window_2.pro = self.pro
        self.sub_window_2.analysis()


    def show_src_tcp_port(self):
        tcp_src_count, _, _, _ = analysis_port(self.pro)
        plot_port(tcp_src_count)

    def show_des_tcp_port(self):
        _, _, tcp_des_count, _ = analysis_port(self.pro)
        plot_port(tcp_des_count)

    def show_src_udp_port(self):
        _, udp_src_count, _, _ = analysis_port(self.pro)
        plot_port(udp_src_count, False)

    def show_des_udp_port(self):
        _, _, _, udp_des_count = analysis_port(self.pro)
        plot_port(udp_des_count, False)

    def show_all_port(self):
        tcp_src_count, udp_src_count, tcp_des_count, udp_des_count = analysis_port(self.pro)
        plot_all_port(tcp_src_count, udp_src_count, tcp_des_count, udp_des_count)

    def show_package(self, path):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        del self.pro
        del self.send_rev
        self.pro, self.send_rev = read(path)
        self.show_packgae_at_table()

    def show_package_batch(self, directory):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        del self.pro
        self.pro = read_dir(directory)
        self.show_packgae_at_table()

    def show_packgae_at_table(self):
        self.tableWidget.setSortingEnabled(False)
        for it in range(len(self.pro)):
            color = self.set_color(self.pro[it].protocol)
            item = self.pro[it]
            cur_row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(cur_row)
            indx = QTableWidgetItem()
            indx.setData(QtCore.Qt.DisplayRole, it)
            self.tableWidget.setItem(cur_row, 0, indx)
            self.tableWidget.setItem(cur_row, 1, QTableWidgetItem(item.time))
            self.tableWidget.setItem(cur_row, 2, QTableWidgetItem(item.src_ip))
            self.tableWidget.setItem(cur_row, 3, QTableWidgetItem(item.des_ip))
            self.tableWidget.setItem(cur_row, 4, QTableWidgetItem(item.protocol))
            len_int = QTableWidgetItem()
            len_int.setData(QtCore.Qt.DisplayRole, item.len)
            self.tableWidget.setItem(cur_row, 5, len_int)
            self.tableWidget.setItem(cur_row, 6, QTableWidgetItem(str(item.info)))
            for i in range(0, 7):
                if self.tableWidget.item(it, i):
                    self.tableWidget.item(it, i).setBackground(color)
        self.tableWidget.setSortingEnabled(True)
        self.tableWidget.setRowCount(self.tableWidget.rowCount())

    def show_data(self, item=None):
        if not item:
            return
        else:
            row = item.row()
            index = int(self.tableWidget.item(row, 0).text())
            self.src_mac.setText(self.pro[index].src_mac)
            self.src_mac_2.setText(self.pro[index].des_mac)
            self.src_ip.setText(self.pro[index].src_ip)
            self.des_ip.setText(self.pro[index].des_ip)
            self.protocol.setText(self.pro[index].protocol)
            self.p_len.setText(str(self.pro[index].len))
            self.src_port.setText(self.pro[index].src_port)
            self.des_port.setText(self.pro[index].des_port)
            self.GMTtime.setText(self.pro[index].time)
            self.show_parser_tree(index)

    def show_parser_tree(self, row):
        self.treeWidget.clear()
        # ethernet
        ethernet = QTreeWidgetItem()
        ethernet.setText(0, 'Ethernet II, Src ' + self.pro[row].src_mac + ', Dst:' + self.pro[row].des_mac)
        self.treeWidget.addTopLevelItem(ethernet)
        dst, src, t = analysis_ethernet(self.pro[row])
        ethe_1 = QTreeWidgetItem()
        ethe_1.setText(0, dst)
        ethe_2 = QTreeWidgetItem()
        ethe_2.setText(0, src)
        ethe_3 = QTreeWidgetItem()
        ethe_3.setText(0, t)
        ethernet.addChild(ethe_1)
        ethernet.addChild(ethe_2)
        ethernet.addChild(ethe_3)
        # ARP
        if 'ARP' in self.pro[row].protocol:
            hardware_type, protocol_type, harware_size, \
            protocol_size, op_code, src, send_ip, des, recv_ip = analysis_arp(self.pro[row])
            if hardware_type and protocol_type:
                arp = QTreeWidgetItem()
                arp.setText(0, 'Address Resolution Protocol')
                self.treeWidget.addTopLevelItem(arp)
                arp_1 = QTreeWidgetItem()
                arp_1.setText(0, hardware_type)
                arp_2 = QTreeWidgetItem()
                arp_2.setText(0, protocol_type)
                arp_3 = QTreeWidgetItem()
                arp_3.setText(0, harware_size)
                arp_4 = QTreeWidgetItem()
                arp_4.setText(0, protocol_size)
                arp_5 = QTreeWidgetItem()
                arp_5.setText(0, op_code)
                arp_6 = QTreeWidgetItem()
                arp_6.setText(0, src)
                arp_7 = QTreeWidgetItem()
                arp_7.setText(0, send_ip)
                arp_8 = QTreeWidgetItem()
                arp_8.setText(0, des)
                arp_9 = QTreeWidgetItem()
                arp_9.setText(0, recv_ip)
                for it in range(1, 10):
                    arp.addChild(eval('arp_' + str(it)))
                return
            else:
                pass
        # Ipv4

        version, header_len, TOS, total_len, identification, flag, res_flag, content, time_to_live, \
        protocol, checksum, src, des = analysis_ipv4(self.pro[row])
        if not version:
            return
        ipv4 = QTreeWidgetItem()
        ipv4.setText(0, 'Internet Protocol Verison 4, Src: ' + self.pro[row].src_ip + ', Dst: ' + self.pro[row].des_ip)
        self.treeWidget.addTopLevelItem(ipv4)
        ipv4_1 = QTreeWidgetItem()
        ipv4_1.setText(0, version)
        ipv4_2 = QTreeWidgetItem()
        ipv4_2.setText(0, header_len)
        ipv4_3 = QTreeWidgetItem()
        ipv4_3.setText(0, TOS)
        ipv4_4 = QTreeWidgetItem()
        ipv4_4.setText(0, total_len)
        ipv4_5 = QTreeWidgetItem()
        ipv4_5.setText(0, identification)
        ipv4_6 = QTreeWidgetItem()
        ipv4_6.setText(0, flag)

        ipv4_6_1 = QTreeWidgetItem()
        ipv4_6_1.setText(0, res_flag[0])
        ipv4_6_2 = QTreeWidgetItem()
        ipv4_6_2.setText(0, res_flag[1])
        ipv4_6_3 = QTreeWidgetItem()
        ipv4_6_3.setText(0, res_flag[2])
        for it in range(1, 4):
            ipv4_6.addChild(eval('ipv4_6_' + str(it)))
        ipv4_7 = QTreeWidgetItem()
        ipv4_7.setText(0, content)
        ipv4_8 = QTreeWidgetItem()
        ipv4_8.setText(0, time_to_live)
        ipv4_9 = QTreeWidgetItem()
        ipv4_9.setText(0, protocol)
        ipv4_10 = QTreeWidgetItem()
        ipv4_10.setText(0, checksum)
        ipv4_11 = QTreeWidgetItem()
        ipv4_11.setText(0, src)
        ipv4_12 = QTreeWidgetItem()
        ipv4_12.setText(0, des)

        for it in range(1, 13):
            ipv4.addChild(eval('ipv4_' + str(it)))
        # TCP
        if 'TCP' in self.pro[row].protocol:
            src, des, seq_number, ack_number, tcp_header_len, flag, ret_flag, window, \
            checksum, urgent_pointer, has_option = analysis_tcp(self.pro[row])
            if src and des:
                tcp = QTreeWidgetItem()
                tcp.setText(0, 'Transmission Control Protocol, Src Port: ' + self.pro[row].src_port
                            + ', Dst Port: ' + self.pro[row].des_port)

                self.treeWidget.addTopLevelItem(tcp)
                tcp_1 = QTreeWidgetItem()
                tcp_1.setText(0, src)
                tcp_2 = QTreeWidgetItem()
                tcp_2.setText(0, des)
                tcp_3 = QTreeWidgetItem()
                tcp_3.setText(0, seq_number)
                tcp_4 = QTreeWidgetItem()
                tcp_4.setText(0, ack_number)
                tcp_5 = QTreeWidgetItem()
                tcp_5.setText(0, tcp_header_len)
                tcp_6 = QTreeWidgetItem()
                tcp_6.setText(0, flag)
                tcp_6_1 = QTreeWidgetItem()
                tcp_6_1.setText(0, ret_flag[0])
                tcp_6_2 = QTreeWidgetItem()
                tcp_6_2.setText(0, ret_flag[1])
                tcp_6_3 = QTreeWidgetItem()
                tcp_6_3.setText(0, ret_flag[2])
                tcp_6_4 = QTreeWidgetItem()
                tcp_6_4.setText(0, ret_flag[3])
                tcp_6_5 = QTreeWidgetItem()
                tcp_6_5.setText(0, ret_flag[4])
                tcp_6_6 = QTreeWidgetItem()
                tcp_6_6.setText(0, ret_flag[5])
                tcp_6_7 = QTreeWidgetItem()
                tcp_6_7.setText(0, ret_flag[6])
                tcp_6_8 = QTreeWidgetItem()
                tcp_6_8.setText(0, ret_flag[7])
                tcp_6_9 = QTreeWidgetItem()
                tcp_6_9.setText(0, ret_flag[8])
                tcp_6_10 = QTreeWidgetItem()
                tcp_6_10.setText(0, ret_flag[9])

                for it in range(1, 11):
                    tcp_6.addChild(eval('tcp_6_' + str(it)))

                tcp_7 = QTreeWidgetItem()
                tcp_7.setText(0, window)
                tcp_8 = QTreeWidgetItem()
                tcp_8.setText(0, checksum)
                tcp_9 = QTreeWidgetItem()
                tcp_9.setText(0, urgent_pointer)
                tcp_10 = QTreeWidgetItem()
                tcp_10.setText(0, 'TCP payload (' + str(self.pro[row].payload_len) + ' bytes)')
                tcp_11 = QTreeWidgetItem()
                tcp_11.setText(0, 'TCP segment data (' + str(self.pro[row].segment) + ' bytes)')

                for it in range(1, 12):
                    tcp.addChild(eval('tcp_' + str(it)))
                if self.pro[row].payload_len != self.pro[row].assemble_payload_len:
                    tcp_12 = QTreeWidgetItem()
                    tcp_12.setText(0, 'Reassembled TCP segment data (' + str(
                        self.pro[row].assemble_payload_len) + ' bytes)')
                    tcp.addChild(tcp_12)
                    for it in self.pro[row].frame:
                        tcp_tmp = QTreeWidgetItem()
                        tcp_tmp.setText(0, 'frame: ' + str(it) + ', accumulate payload: ' + str(
                            self.pro[it].assemble_payload_len) + ' bytes')
                        tcp_12.addChild(tcp_tmp)
                    tcp_tmp = QTreeWidgetItem()
                    tcp_tmp.setText(0, 'frame: ' + str(row) + ', payload: ' + str(self.pro[row].payload_len) + ' bytes')
                    tcp_12.addChild(tcp_tmp)
                if not has_option:
                    tcp_header = 20
                else:
                    tcp_header = 32
                # http part
                if 'HTTP' in self.pro[row].protocol:
                    if self.pro[row].ok:
                        data = self.pro[row].assemble_data
                        offset = 0
                    else:
                        data = self.pro[row].data
                        offset = 14 + 20 + tcp_header

                    res, length, con_type = analysis_http(data, offset)
                    header = res.split(b'\r\n\r\n')[0].split(b'\r\n')
                    body = res.split(b'\r\n\r\n')[1:]
                    body = b''.join(body).split(b'\r\n')
                    http = QTreeWidgetItem()
                    http.setText(0, 'Hypertext Transfer Protocol ' + con_type)
                    self.treeWidget.addTopLevelItem(http)
                    for it in header:
                        content = str(it, 'utf-8', errors='ignore')
                        if it:
                            http_tmp = QTreeWidgetItem()
                            http_tmp.setText(0, content)
                            http.addChild(http_tmp)
                    if length and con_type:
                        http_content = QTreeWidgetItem()
                        http_content.setText(0, 'Media Type: ' + con_type + ' Data Length(' + str(length) + ')')
                        self.treeWidget.addTopLevelItem(http_content)
                        for it in body:
                            content = str(it, 'utf-8', errors='ignore')
                            if it:
                                http_tmp = QTreeWidgetItem()
                                http_tmp.setText(0, content)
                                http_content.addChild(http_tmp)
                    return
                # TLS part
                if 'TLS' not in self.pro[row].protocol:
                    return
                TLS = QTreeWidgetItem()
                TLS.setText(0, 'Transport Layer Security')
                self.treeWidget.addTopLevelItem(TLS)
                if self.pro[row].ok:
                    data = self.pro[row].assemble_data
                    offset = 0
                else:
                    data = self.pro[row].data
                    offset = 14 + 20 + tcp_header
                res = analysis_tls_list(data, offset)
                sub_len = 0
                for ite in res:
                    content_type, con_type, version, ver, length, enc, raw_len = ite
                    if content_type and version:
                        # sub content type
                        tls = QTreeWidgetItem()
                        tls.setText(0, ver + ' Record Layer: ' + con_type)
                        TLS.addChild(tls)

                        tls_1 = QTreeWidgetItem()
                        tls_1.setText(0, content_type)
                        tls_2 = QTreeWidgetItem()
                        tls_2.setText(0, version)
                        tls_3 = QTreeWidgetItem()
                        tls_3.setText(0, length)
                        for it in range(1, 4):
                            tls.addChild(eval('tls_' + str(it)))

                        if 'Application' in con_type or 'Alert' in con_type:
                            tls_4 = QTreeWidgetItem()
                            tls_4.setText(0, enc)
                            tls.addChild(tcp_4)
                        elif 'Handshake' in con_type and len(data[offset + 5 + sub_len:]):
                            sub_type = data[offset + 5 + sub_len]
                            if sub_type == 1:
                                tls.setText(0, ver + ' Record Layer: Client Hello')
                                hand_shake_type, length, version, random, session_id_length, session_id, \
                                cipher_suites_length, \
                                cuites, compression_method_length, \
                                method, extension_length = tls_hand_shake(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Client Hello')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, version)
                                tls_hand_4 = QTreeWidgetItem()
                                tls_hand_4.setText(0, random)
                                tls_hand_5 = QTreeWidgetItem()
                                tls_hand_5.setText(0, session_id_length)
                                tls_hand_6 = QTreeWidgetItem()
                                tls_hand_6.setText(0, session_id)
                                tls_hand_7 = QTreeWidgetItem()
                                tls_hand_7.setText(0, cipher_suites_length)
                                tls_hand_8 = QTreeWidgetItem()
                                tls_hand_8.setText(0, 'Cipher Suites')
                                for it in cuites:
                                    tmp = QTreeWidgetItem()
                                    tmp.setText(0, it)
                                    tls_hand_8.addChild(tmp)
                                tls_hand_9 = QTreeWidgetItem()
                                tls_hand_9.setText(0, compression_method_length)
                                tls_hand_10 = QTreeWidgetItem()
                                tls_hand_10.setText(0, 'Compression Method')
                                for it in method:
                                    tmp = QTreeWidgetItem()
                                    tmp.setText(0, it)
                                    tls_hand_10.addChild(tmp)
                                tls_hand_11 = QTreeWidgetItem()
                                tls_hand_11.setText(0, extension_length)
                                for it in range(1, 12):
                                    tls_hand.addChild(eval('tls_hand_' + str(it)))
                            elif sub_type == 2:
                                tls.setText(0, ver + ' Record Layer: Server Hello')
                                hand_shake_type, length, version, random, \
                                session_id_length, session_id, \
                                cipher_suite, compression_method, \
                                extension_length = tls_hand_shake_server(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Server Hello')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, version)
                                tls_hand_4 = QTreeWidgetItem()
                                tls_hand_4.setText(0, random)
                                tls_hand_5 = QTreeWidgetItem()
                                tls_hand_5.setText(0, session_id_length)
                                tls_hand_6 = QTreeWidgetItem()
                                tls_hand_6.setText(0, session_id)
                                tls_hand_7 = QTreeWidgetItem()
                                tls_hand_7.setText(0, cipher_suite)
                                tls_hand_8 = QTreeWidgetItem()
                                tls_hand_8.setText(0, compression_method)
                                tls_hand_9 = QTreeWidgetItem()
                                tls_hand_9.setText(0, extension_length)
                                for it in range(1, 10):
                                    tls_hand.addChild(eval('tls_hand_' + str(it)))
                            elif sub_type == 16:
                                tls.setText(0, ver + ' Record Layer: Client Key Exchange')
                                hand_shake_type, length, \
                                public_key_length, public_key = tls_key_exchange(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Client Key Exchange')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, 'EC Diffe-Hellman Client Parameter')
                                tls_hand_3_1 = QTreeWidgetItem()
                                tls_hand_3_1.setText(0, public_key_length)
                                tls_hand_3_2 = QTreeWidgetItem()
                                tls_hand_3_2.setText(0, public_key)
                                tls_hand_3.addChild(tls_hand_3_1)
                                tls_hand_3.addChild(tls_hand_3_2)
                                for it in range(1, 4):
                                    tls_hand.addChild(eval('tls_hand_' + str(it)))
                            elif sub_type == 4:
                                tls.setText(0, ver + ' Record Layer: New session Ticket')
                                hand_shake_type, length, time_hint, \
                                session_ticket_len, ticket = tls_new_session_ticket(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: New session Ticket')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, 'TLS Session Ticket')
                                tls_hand_3_1 = QTreeWidgetItem()
                                tls_hand_3_1.setText(0, time_hint)
                                tls_hand_3_2 = QTreeWidgetItem()
                                tls_hand_3_2.setText(0, session_ticket_len)
                                tls_hand_3_3 = QTreeWidgetItem()
                                tls_hand_3_3.setText(0, ticket)
                                for it in range(1, 4):
                                    tls_hand_3.addChild(eval('tls_hand_3_' + str(it)))
                                for it in range(1, 4):
                                    tls_hand.addChild(eval('tls_hand_' + str(it)))
                            elif sub_type == 14:
                                tls.setText(0, ver + ' Record Layer: Server Hello Done')
                                hand_shake_type, length = tls_server_hello_done(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Server Hello Done')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand.addChild(tls_hand_1)
                                tls_hand.addChild(tls_hand_2)
                            elif sub_type == 12:
                                tls.setText(0, ver + ' Record Layer: Server Key Exchange')
                                hand_shake_type, length, curve_type, curve_name, \
                                pubkey_len, pubkey, sig_algorithm, sig_len, sig \
                                    = server_key_exchange(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Server Key Exchange')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, 'EC Diffie-Hellman Server Params')
                                tls_hand_3_1 = QTreeWidgetItem()
                                tls_hand_3_1.setText(0, curve_type)
                                tls_hand_3_2 = QTreeWidgetItem()
                                tls_hand_3_2.setText(0, curve_name)
                                tls_hand_3_3 = QTreeWidgetItem()
                                tls_hand_3_3.setText(0, pubkey_len)
                                tls_hand_3_4 = QTreeWidgetItem()
                                tls_hand_3_4.setText(0, pubkey)
                                tls_hand_3_5 = QTreeWidgetItem()
                                tls_hand_3_5.setText(0, sig_algorithm)
                                tls_hand_3_6 = QTreeWidgetItem()
                                tls_hand_3_6.setText(0, sig_len)
                                tls_hand_3_7 = QTreeWidgetItem()
                                tls_hand_3_7.setText(0, sig)
                                tls.addChild(tls_hand_1)
                                tls.addChild(tls_hand_2)
                                tls.addChild(tls_hand_3)
                                for it in range(1, 8):
                                    tls_hand_3.addChild(eval('tls_hand_3_' + str(it)))
                            elif sub_type == 11:
                                tls.setText(0, ver + ' Record Layer: Certificate')
                                hand_shake_type, length, \
                                certificates_len, certificate = tls_certificate(data, offset + 5 + sub_len)
                                tls_hand = QTreeWidgetItem()
                                tls_hand.setText(0, 'Handshake Protocol: Certificate')
                                tls.addChild(tls_hand)
                                tls_hand_1 = QTreeWidgetItem()
                                tls_hand_1.setText(0, hand_shake_type)
                                tls_hand_2 = QTreeWidgetItem()
                                tls_hand_2.setText(0, length)
                                tls_hand_3 = QTreeWidgetItem()
                                tls_hand_3.setText(0, certificates_len)
                                tls_hand_4 = QTreeWidgetItem()
                                tls_hand_4.setText(0, 'Certificates (' +
                                                   certificates_len.split(':')[-1].replace(' ', '') + ') bytes')

                                for it in certificate:
                                    tls_len = QTreeWidgetItem()
                                    tls_len.setText(0, it[0])
                                    tls_key = QTreeWidgetItem()
                                    tls_key.setText(0, it[1])
                                    tls_hand_4.addChild(tls_len)
                                    tls_hand_4.addChild(tls_key)
                                    for item in it[2]:
                                        tls_tmp = QTreeWidgetItem()
                                        if type(item).__name__ == 'list':
                                            tls_tmp.setText(0, 'info')
                                            for inf in item:
                                                tls_t = QTreeWidgetItem()
                                                tls_t.setText(0, inf)
                                                tls_tmp.addChild(tls_t)
                                        else:
                                            tls_tmp.setText(0, item)
                                        tls_key.addChild(tls_tmp)

                                for it in range(1, 5):
                                    tls_hand.addChild(eval('tls_hand_' + str(it)))

                        sub_len += raw_len

        # UDP
        elif 'UDP' in self.pro[row].protocol:
            src, des, length, checksum, payload = analysis_udp(self.pro[row])
            if src and des:
                udp = QTreeWidgetItem()
                udp.setText(0,
                            'User Datagram Protocol, Src Port: ' + self.pro[row].src_port + ', Dst Port: ' + self.pro[
                                row].des_port)
                self.treeWidget.addTopLevelItem(udp)
                udp_1 = QTreeWidgetItem()
                udp_1.setText(0, src)
                udp_2 = QTreeWidgetItem()
                udp_2.setText(0, des)
                udp_3 = QTreeWidgetItem()
                udp_3.setText(0, length)
                udp_4 = QTreeWidgetItem()
                udp_4.setText(0, checksum)
                udp_5 = QTreeWidgetItem()
                udp_5.setText(0, payload)

                for it in range(1, 6):
                    udp.addChild(eval('udp_' + str(it)))
            # DNS
            if 'DNS' in self.pro[row].protocol:
                transaction_id, flags, QR, Opcode, AA, TC, RD, RA, Z, rcode, \
                Question, Answer, Authority, \
                Additional, question_res = analysis_dns(self.pro[row])
                if transaction_id:
                    dns = QTreeWidgetItem()
                    dns.setText(0, 'Domain Name system')
                    self.treeWidget.addTopLevelItem(dns)
                    dns_1 = QTreeWidgetItem()
                    dns_1.setText(0, transaction_id)
                    dns_2 = QTreeWidgetItem()
                    dns_2.setText(0, flags)
                    dns_2_1 = QTreeWidgetItem()
                    dns_2_1.setText(0, QR)
                    dns_2_2 = QTreeWidgetItem()
                    dns_2_2.setText(0, Opcode)
                    dns_2_3 = QTreeWidgetItem()
                    dns_2_3.setText(0, AA)
                    dns_2_4 = QTreeWidgetItem()
                    dns_2_4.setText(0, TC)
                    dns_2_5 = QTreeWidgetItem()
                    dns_2_5.setText(0, RD)
                    dns_2_6 = QTreeWidgetItem()
                    dns_2_6.setText(0, RA)
                    dns_2_7 = QTreeWidgetItem()
                    dns_2_7.setText(0, Z)
                    dns_2_8 = QTreeWidgetItem()
                    dns_2_8.setText(0, rcode)
                    for it in range(1, 9):
                        dns_2.addChild(eval('dns_2_' + str(it)))
                    dns_3 = QTreeWidgetItem()
                    dns_3.setText(0, Question)
                    dns_4 = QTreeWidgetItem()
                    dns_4.setText(0, Answer)
                    dns_5 = QTreeWidgetItem()
                    dns_5.setText(0, Authority)
                    dns_6 = QTreeWidgetItem()
                    dns_6.setText(0, Additional)
                    dns_7 = QTreeWidgetItem()
                    dns_7.setText(0, 'Queries')
                    for it in range(1, 8):
                        dns.addChild(eval('dns_' + str(it)))

                    for it in question_res:
                        dns_tmp = QTreeWidgetItem()
                        title = it[0].replace('Name: ', '')
                        dns_tmp.setText(0, title)
                        dns_7.addChild(dns_tmp)
                        for i in range(4):
                            dns_t = QTreeWidgetItem()
                            dns_t.setText(0, it[i])
                            dns_tmp.addChild(dns_t)
                else:
                    pass

    def set_color(self, type):
        if 'HTTP' in type:
            return QColor(179, 238, 58)
        elif 'DNS' in type:
            return QColor(255, 215, 0)
        elif 'TLS' in type:
            return QColor(147, 112, 219)
        elif 'TCP' in type:
            return QColor(216, 191, 216)
        elif 'UDP' in type:
            return QColor(255, 255, 224)
        elif 'ICMP' in type:
            return QColor(255, 218, 185)
        elif 'ARP' in type:
            return QColor(255, 160, 122)
        else:
            return QColor(255, 255, 224)

    def drop_data(self):
        conditon = self.filter.text().replace(' ', '')
        if conditon == '':
            self.filter.setStyleSheet("""QLineEdit { background-color: green; color: white }""")
            self.conditon_show()
            self.statusbar.showMessage('隐藏数据包:0条,总数:' + str(self.tableWidget.rowCount()))
            return
        regProtocol = r"UDP|TCP|ICMP|TLS|ARP|DNS|OICQ|HTTP|" \
                      "(srcip|desip|ip)=" \
                      "((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])[\\.]){3}(25[0-5]|2[0-4][0-9]|1[" \
                      "0-9][0-9]|[1-9][" \
                      "0-9]|[0-9])|" \
                      "(srcport|desport|port)=" \
                      "((6553[0-5])|[655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{" \
                      "3}|[1-9][0-9]{2}|[ " \
                      "1-9][0-9]|[0-9])"
        pattern = re.compile(regProtocol)
        res = re.fullmatch(pattern, conditon)
        if res:
            self.filter.setStyleSheet("""QLineEdit { background-color: green; color: white }""")
            ex = self.check_condition(res.group())
            self.conditon_show(ex)
            self.statusbar.showMessage('隐藏数据包: ' + str(len(ex)) + '条, 总数:' + str(self.tableWidget.rowCount()))
        else:
            self.filter.setStyleSheet("""QLineEdit { background-color: red; color: white }""")

    def check_condition(self, condition: str):
        ex = set()
        if condition in ['TCP', 'UDP', 'ICMP', 'TLS', 'ARP', 'DNS', 'OICQ', 'HTTP']:
            ex = self.check_tcp(condition)
        elif 'ip' in condition:
            ip_addr = condition.split('=')[-1].replace(' ', '')
            mode = condition.split('=')[0].replace(' ', '')
            if mode.startswith('src'):
                flag = 1
            elif mode.startswith('des'):
                flag = 2
            else:
                flag = 0
            ex = self.check_ip(ip_addr, flag)
        elif 'port' in condition:
            port = condition.split('=')[-1].replace(' ', '')
            mode = condition.split('=')[0].replace(' ', '')
            if mode.startswith('src'):
                flag = 1
            elif mode.startswith('des'):
                flag = 2
            else:
                flag = 0
            ex = self.check_port(port, flag)
        return ex

    def check_tcp(self, protocol: str):
        exclude = set()
        row_number = self.tableWidget.rowCount()
        for i in range(row_number):
            if protocol in self.tableWidget.item(i, 4).text():
                continue
            else:
                exclude.add(i)
        return exclude

    def check_ip(self, ip_addr, mode=0):
        exclude = set()
        row_number = self.tableWidget.rowCount()
        for i in range(row_number):
            if mode == 0 and (
                    self.tableWidget.item(i, 2).text() == ip_addr or self.tableWidget.item(i, 3).text() == ip_addr):
                continue
            elif mode == 1 and self.tableWidget.item(i, 2).text() == ip_addr:
                continue
            elif mode == 2 and self.tableWidget.item(i, 3).text() == ip_addr:
                continue
            else:
                exclude.add(i)
        return exclude

    def check_port(self, port, mode=0):
        exclude = set()
        row_number = self.tableWidget.rowCount()
        if not row_number == len(self.pro):
            return set()
        for i in range(row_number):
            package = self.pro[i]
            if mode == 0 and (package.src_port == port or package.des_port == port):
                continue
            elif mode == 1 and package.src_port == port:
                continue
            elif mode == 2 and package.des_port == port:
                continue
            else:
                exclude.add(i)
        return exclude

    def conditon_show(self, exclude=set()):
        row_number = self.tableWidget.rowCount()
        for it in range(row_number):
            if it in exclude:
                self.tableWidget.setRowHidden(it, True)
            else:
                self.tableWidget.setRowHidden(it, False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "流量分析系统"))
        self.label.setText(_translate("MainWindow", "过滤条件"))
        self.pushButton.setText(_translate("MainWindow", "过滤"))
        self.label_2.setText(_translate("MainWindow", "源MAC"))
        self.label_3.setText(_translate("MainWindow", "目的MAC"))
        self.label_8.setText(_translate("MainWindow", "GMTtime"))
        self.label_4.setText(_translate("MainWindow", "协议类别"))
        self.label_5.setText(_translate("MainWindow", "源IP"))
        self.label_6.setText(_translate("MainWindow", "目的IP"))
        self.label_7.setText(_translate("MainWindow", "捕获长度"))
        self.label_9.setText(_translate("MainWindow", "源端口"))
        self.label_10.setText(_translate("MainWindow", "目的端口"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "操作"))
        self.menu_3.setTitle(_translate("MainWindow", "统计"))
        self.menu_4.setTitle(_translate("MainWindow", "分析"))
        self.menu_5.setTitle(_translate("MainWindow", "端口号分析"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionopen_file.setText(_translate("MainWindow", "打开pcap文件"))
        self.actionopen_dir.setText(_translate("MainWindow", "打开文件夹"))
        self.actionclear.setText(_translate("MainWindow", "清空列表"))
        self.actionclear_tree.setText(_translate("MainWindow", "清空结构树"))
        self.actionpicture.setText(_translate("MainWindow", "分布图"))
        self.actionsession.setText(_translate("MainWindow", "网络图"))
        self.actionIP.setText(_translate("MainWindow", "IP地址分析"))
        self.actionall_data.setText(_translate("MainWindow", "总体情况"))
        self.actionsrc_tcp.setText(_translate("MainWindow", "源TCP"))
        self.actiondes_tcp.setText(_translate("MainWindow", "目的TCP"))
        self.actionsrc_udp.setText(_translate("MainWindow", "源UDP"))
        self.actiondes_udp.setText(_translate("MainWindow", "目的UDP"))
        self.actionall_tcp.setText(_translate("MainWindow", "all_tcp"))
        self.actionall_port.setText(_translate("MainWindow", "所有流量"))
        self.actionall.setText(_translate("MainWindow", "all"))
        self.actionDNS.setText(_translate("MainWindow", "DNS分析"))
